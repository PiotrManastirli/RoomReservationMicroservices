---
#version: '3.7'

services:
#  postgres-room:
#    container_name: postgres-room
#    image: postgres
#    environment:
#      POSTGRES_DB: room-service
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: root
#      PGDATA: /data/postgres
#    volumes:
#      - ./postgres-room:/data/postgres
#    expose:
#      - "5431"
#    ports:
#      - "5431:5431"
#    command: -p 5431
#    restart: always

#  postgres-reservation:
#    container_name: postgres-reservation
#    image: postgres
#    environment:
#      POSTGRES_DB: reservation-service
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: root
#      PGDATA: /data/postgres
#    volumes:
#        - ./postgres-reservation:/data/postgres
#    expose:
#      - "5430"
#    ports:
#      - "5430:5430"
#    restart: always
#  postgres-identity:
#    container_name: postgres-identity
#    image: postgres
#    environment:
#      POSTGRES_DB: identity-service
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: root
#      PGDATA: /data/postgres
#    volumes:
#      - ./postgres-identity:/data/postgres
#    expose:
#      - "5433"
#    ports:
#      - "5433:5433"
#    command: -p 5433
#    restart: always
  mysql-room:
    container_name: mysql-room
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: rooms
    volumes:
      - ./mysql_room_data:/var/lib/mysql
    ports:
      - "5431:3306"
    command: --port=3306 --default-authentication-plugin=mysql_native_password
    restart: always

  reservation-mysql:
      container_name: reservation-mysql
      image: mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: 123456
        MYSQL_DATABASE: reservation
      volumes:
        - ./mysql_reservation_data:/var/lib/mysql
      ports:
        - "5435:3306"
      command: --port=3306 --default-authentication-plugin=mysql_native_password
      restart: always

  users-mysql:
      container_name: users-mysql
      image: mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: 123456
        MYSQL_DATABASE: microservices_users
      volumes:
        - ./mysql_users_data:/var/lib/mysql
      ports:
        - "5433:3306"
      command: --port=3306 --default-authentication-plugin=mysql_native_password
      restart: always
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: piotrmanastirli/discovery-server:latest
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway:
    image: piotrmanastirli/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server

  ## Room-Service Docker Compose Config
  room-service:
    container_name: room-service
    image: piotrmanastirli/room-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL = jdbc:postgresql://postgres-room:5431/room-service
      - SPRING_DATASOURCE_URL = jdbc:mysql://mysql-room:5431/rooms
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect
    depends_on:
#      - postgres-room
      - mysql-room
      - discovery-server
      - api-gateway

  ## Reservation-Service Docker Compose Config
  reservation-service:
    container_name: reservation-service
    image: piotrmanastirli/reservation-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL = jdbc:postgresql://postgres-reservation:5430/reservation-service
      - SPRING_DATASOURCE_URL=jdbc:mysql://reservation-mysql:5435/reservation
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect
    depends_on:
#      - postgres-reservation
      - reservation-mysql
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  ## Users-Service Docker Compose Config
  users-service:
    container_name: users-service
    image: piotrmanastirli/identity-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL = jdbc:postgresql://postgres-identity:5432/identity-service
      - SPRING_DATASOURCE_URL=jdbc:mysql://users-mysql:5433/microservices_users
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect
    depends_on:
#      - postgres-identity
      - users-mysql
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: piotrmanastirli/notification-service:latest
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway

#  ## Prometheus
#  prometheus:
#    image: prom/prometheus:v2.37.1
#    container_name: prometheus
#    restart: always
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    depends_on:
#      - product-service
#      - inventory-service
#      - order-service
#      - notification-service
#
#  grafana:
#    image: grafana/grafana-oss:8.5.2
#    container_name: grafana
#    restart: always
#    ports:
#      - "3000:3000"
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./grafana:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=password